#ifndef _BASE64_HTML_H
#define _BASE64_HTML_H
static const char *html_code_base64 = "PGh0bWwgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPgogICAgPGhlYWQ+CiAgICA8dGl0bGU+5pWw5o2u5YiG5Y+R57O757ufPC90aXRsZT4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04Ij4KICAgIDxzdHlsZT4KICAgICAgICBib2R5LklFX003LCBib2R5LklFX004LCBib2R5LldpbjZ7Zm9udC1mYW1pbHk6IlNlZ29lIFVJIiwgVGFob21hLCBWZXJkYW5hLCBBcmlhbDt9CiAgICAgICAgYm9keS5TYWZhcml7bWluLXdpZHRoOjk4N3B4O30KICAgICAgICBib2R5LlNGX2lQaG9uZXstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6bm9uZTt9CiAgICAgICAgYm9keQogICAgICAgIHsKICAgICAgICAgICAgbWFyZ2luOjA7Zm9udC1mYW1pbHk6VGFob21hLCBWZXJkYW5hLCBBcmlhbDsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjojRkVGRUZFOwogICAgICAgICAgICBjb2xvcjojMzMzOwogICAgICAgICAgICBmb250LXNpemU6MTJwdDsKICAgICAgICAgICAgd2lkdGg6MTAwJTsKICAgICAgICAgICAgaGVpZ2h0OjEwMCU7CiAgICAgICAgfQogICAgICAgIGZvcm17bWFyZ2luOjBweDtkaXNwbGF5OiBpbmxpbmV9CiAgICAgICAgI21haW5mcmFtZXtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOiNGRUZFRkU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt9CiAgICAgICAgI3Rhc2t7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojRjRGQkZGO2Rpc3BsYXk6aW5saW5lOwogICAgICAgICAgICBib3JkZXI6MXB4IHNvbGlkICM4MUJFRjc7cGFkZGluZzowcHg7bGVmdDowcHg7dG9wOjBweDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO30KICAgICAgICAudGFza2xpc3R7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzowcHg7IGJhY2tncm91bmQtY29sb3I6I0QwRTlGNztoZWlnaHQ6MTAwJTt9CiAgICAgICAgLnRhc2t0aXRsZXtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOiMyRjVGQTE7Y29sb3I6I2MwYzBjMDsgaGVpZ2h0OjMwcHg7fQogICAgICAgICN0YXNrc2VsZWN0e3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6I0QwRTlGNztjb2xvcjojMkY1RkExO3dpZHRoOjEwMCU7fQogICAgICAgICN0YXNrbGlzdHMgLnRhc2tsaXN0c3twb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOiNGNEZCRkY7Y29sb3I6IzJGNUZBMTt9CiAgICAgICAgLnRhc2stdGl0bGV7YmFja2dyb3VuZC1jb2xvcjojMkY1RkExO2NvbG9yOiNjMGMwYzA7aGVpZ2h0OjMwcHg7d2lkdGg6MTAwJTt9CiAgICAgICAgLnVsdGFie2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjA7bWFyZ2luOjA7d2lkdGg6MTAwJTt9CiAgICAgICAgLmx0YWJuYW1le2N1cnNvcjpwb2ludGVyO2ZvbnQtc2l6ZToxMnB0O30KICAgICAgICAubHRhYntiYWNrZ3JvdW5kLWNvbG9yOiNEMEU5Rjc7Y3Vyc29yOiBwb2ludGVyO3dpZHRoOjEwMCU7fQogICAgICAgIC5sdGFiLXNlbGVjdGVke2JhY2tncm91bmQtY29sb3I6I0Y0RkJGRjtjdXJzb3I6IHBvaW50ZXI7d2lkdGg6MTAwJTt9CiAgICAgICAgLmxmbmFtZXtjdXJzb3I6IHBvaW50ZXI7fQogICAgICAgIC5sdGFza3tiYWNrZ3JvdW5kLWNvbG9yOiNGNEZCRkY7Y3Vyc29yOiBwb2ludGVyO30KICAgICAgICAubHRhc2stc2VsZWN0ZWR7YmFja2dyb3VuZC1jb2xvcjojRDBFOUY3O2N1cnNvcjogcG9pbnRlcjt9CiAgICAgICAgI25vZGVmb3Jte3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjYwMHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZmZmZjsKICAgICAgICAgICAgYm9yZGVyOjFweCBzb2xpZCAjODFCRUY3O3BhZGRpbmc6MTBweDt6LWluZGV4Ojk5O292ZXJmbG93OmF1dG87ZGlzcGxheTpub25lO30KICAgICAgICAjdGFza2Zvcm17cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NTAwcHg7aGVpZ2h0OjUwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmZmZmOwogICAgICAgICAgICBib3JkZXI6MXB4IHNvbGlkICM4MUJFRjc7cGFkZGluZy10b3A6MTBweDtwYWRkaW5nLWxlZnQ6NnB4O2ZvbnQtc2l6ZToxMnB0OwogICAgICAgICAgICBjb2xvcjojMkY1RkExO3otaW5kZXg6OTk7b3ZlcmZsb3c6YXV0bztkaXNwbGF5Om5vbmU7fQogICAgICAgIC5lYWRke2NvbG9yOiM1RkI0MDQ7Zm9udC1zaXplOjEzcHQ7Zm9udC13ZWlnaHQ6Ym9sZGVyO2N1cnNvcjpwb2ludGVyO30KICAgICAgICAuZXVwZGF0ZXtjb2xvcjojRkY4MDAwO2ZvbnQtc2l6ZToxM3B0O2ZvbnQtd2VpZ2h0OmJvbGRlcjtjdXJzb3I6cG9pbnRlcjt9CiAgICAgICAgLmVkZWxldGV7Y29sb3I6I0I0MDQ1Rjtmb250LXNpemU6MTNwdDtmb250LXdlaWdodDpib2xkZXI7Y3Vyc29yOnBvaW50ZXI7fQogICAgICAgIC5ldmlld3tjb2xvcjojMDAwMGZmO2ZvbnQtc2l6ZToxM3B0O2ZvbnQtd2VpZ2h0OmJvbGRlcjtjdXJzb3I6cG9pbnRlcjt9CiAgICAgICAgLmNsb3NldHh0e2N1cnNvcjpwb2ludGVyO2ZvbnQtc2l6ZToxMHB0O2NvbG9yOiNjY2NjY2M7dGV4dC1hbGlnbjpyaWdodDt9CiAgICAgICAgLm50YXNre2Rpc3BsYXk6aW5saW5lO2NvbG9yOnJlZDtmb250LXNpemU6MTJwdDt9CiAgICAgICAgPC9zdHlsZT4KICAgICAgICA8c2NyaXB0IGxhbmd1YWdlPSdqYXZhc2NyaXB0Jz4KICAgICAgICAgICAgdmFyIGNocmFkZCA9ICfinJonLCBjaHJmb2xkID0gJ+KWuicsIGNocnRyZWUgPSAn4pa8JywgY2hyZWRpdD0n4pyOJywgY2hyZGVsPSfinJgnLCBjaHJ2aWV3ID0gJ+KYnCAnOwogICAgICAgICAgICB2YXIgYmFzZTY0RW5jb2RlQ2hhcnMgPSAKICAgICAgICAgICAgIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8iOwogICAgICAgICAgICB2YXIgYmFzZTY0RGVjb2RlQ2hhcnMgPSBuZXcgQXJyYXkoCiAgICAgICAgICAgIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLAogICAgICAgICAgICAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwKICAgICAgICAgICAgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCA2MiwgLTEsIC0xLCAtMSwgNjMsCiAgICAgICAgICAgIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDU4LCA1OSwgNjAsIDYxLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLAogICAgICAgICAgICAtMSwgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwKICAgICAgICAgICAgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAtMSwgLTEsIC0xLCAtMSwgLTEsCiAgICAgICAgICAgIC0xLCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLCAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLAogICAgICAgICAgICA0MSwgNDIsIDQzLCA0NCwgNDUsIDQ2LCA0NywgNDgsIDQ5LCA1MCwgNTEsIC0xLCAtMSwgLTEsIC0xLCAtMSk7CiAgICAgICAgICAgIGZ1bmN0aW9uIGJhc2U2NGVuY29kZShzdHIpIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgb3V0LCBpLCBsZW47CiAgICAgICAgICAgICAgICB2YXIgYzEsIGMyLCBjMzsKCiAgICAgICAgICAgICAgICBsZW4gPSBzdHIubGVuZ3RoOwogICAgICAgICAgICAgICAgaSA9IDA7CiAgICAgICAgICAgICAgICBvdXQgPSAiIjsKICAgICAgICAgICAgICAgIHdoaWxlKGkgPCBsZW4pIHsKICAgICAgICAgICAgICAgICAgICBjMSA9IHN0ci5jaGFyQ29kZUF0KGkrKykgJiAweGZmOwogICAgICAgICAgICAgICAgICAgIGlmKGkgPT0gbGVuKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IGJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdChjMSA+PiAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IGJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdCgoYzEgJiAweDMpIDw8IDQpOwogICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gIj09IjsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQoaSsrKTsKICAgICAgICAgICAgICAgICAgICBpZihpID09IGxlbikKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoYzEgPj4gMik7CiAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKChjMSAmIDB4Myk8PCA0KSB8ICgoYzIgJiAweEYwKSA+PiA0KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKGMyICYgMHhGKSA8PCAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICI9IjsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGMzID0gc3RyLmNoYXJDb2RlQXQoaSsrKTsKICAgICAgICAgICAgICAgICAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KGMxID4+IDIpOwogICAgICAgICAgICAgICAgICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKChjMSAmIDB4Myk8PCA0KSB8ICgoYzIgJiAweEYwKSA+PiA0KSk7CiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IGJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdCgoKGMyICYgMHhGKSA8PCAyKSB8ICgoYzMgJiAweEMwKSA+PjYpKTsKICAgICAgICAgICAgICAgICAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KGMzICYgMHgzRik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gb3V0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGJhc2U2NGRlY29kZShzdHIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBjMSwgYzIsIGMzLCBjNDsKICAgICAgICAgICAgICAgIHZhciBpLCBsZW4sIG91dDsKCiAgICAgICAgICAgICAgICBsZW4gPSBzdHIubGVuZ3RoOwogICAgICAgICAgICAgICAgaSA9IDA7CiAgICAgICAgICAgICAgICBvdXQgPSAiIjsKICAgICAgICAgICAgICAgIHdoaWxlKGkgPCBsZW4pIHsKICAgICAgICAgICAgICAgICAgICAvKiBjMSAqLwogICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgYzEgPSBiYXNlNjREZWNvZGVDaGFyc1tzdHIuY2hhckNvZGVBdChpKyspICYgMHhmZl07CiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZShpIDwgbGVuICYmIGMxID09IC0xKTsKICAgICAgICAgICAgICAgICAgICBpZihjMSA9PSAtMSkKICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgLyogYzIgKi8KICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgIGMyID0gYmFzZTY0RGVjb2RlQ2hhcnNbc3RyLmNoYXJDb2RlQXQoaSsrKSAmIDB4ZmZdOwogICAgICAgICAgICAgICAgICAgIH0gd2hpbGUoaSA8IGxlbiAmJiBjMiA9PSAtMSk7CiAgICAgICAgICAgICAgICAgICAgaWYoYzIgPT0gLTEpCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjMSA8PCAyKSB8ICgoYzIgJiAweDMwKSA+PiA0KSk7CgogICAgICAgICAgICAgICAgICAgIC8qIGMzICovCiAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICBjMyA9IHN0ci5jaGFyQ29kZUF0KGkrKykgJiAweGZmOwogICAgICAgICAgICAgICAgICAgICAgICBpZihjMyA9PSA2MSkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgICAgICAgICAgICAgYzMgPSBiYXNlNjREZWNvZGVDaGFyc1tjM107CiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZShpIDwgbGVuICYmIGMzID09IC0xKTsKICAgICAgICAgICAgICAgICAgICBpZihjMyA9PSAtMSkKICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMiAmIDBYRikgPDwgNCkgfCAoKGMzICYgMHgzQykgPj4gMikpOwoKICAgICAgICAgICAgICAgICAgICAvKiBjNCAqLwogICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgYzQgPSBzdHIuY2hhckNvZGVBdChpKyspICYgMHhmZjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoYzQgPT0gNjEpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGM0ID0gYmFzZTY0RGVjb2RlQ2hhcnNbYzRdOwogICAgICAgICAgICAgICAgICAgIH0gd2hpbGUoaSA8IGxlbiAmJiBjNCA9PSAtMSk7CiAgICAgICAgICAgICAgICAgICAgaWYoYzQgPT0gLTEpCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMyAmIDB4MDMpIDw8IDYpIHwgYzQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiB1dGYxNnRvOChzdHIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBvdXQsIGksIGxlbiwgYzsKICAgICAgICAgICAgICAgIG91dCA9ICIiOwogICAgICAgICAgICAgICAgbGVuID0gc3RyLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICAgICAgICAgIGlmICgoYyA+PSAweDAwMDEpICYmIChjIDw9IDB4MDA3RikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHN0ci5jaGFyQXQoaSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA+IDB4MDdGRikgewogICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEUwIHwgKChjID4+IDEyKSAmIDB4MEYpKTsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8ICgoYyA+PiAgNikgJiAweDNGKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGMgPj4gIDApICYgMHgzRikpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEMwIHwgKChjID4+ICA2KSAmIDB4MUYpKTsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8ICgoYyA+PiAgMCkgJiAweDNGKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiB1dGY4dG8xNihzdHIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBvdXQsIGksIGxlbiwgYzsKICAgICAgICAgICAgICAgIHZhciBjaGFyMiwgY2hhcjM7CiAgICAgICAgICAgICAgICBvdXQgPSAiIjsKICAgICAgICAgICAgICAgIGxlbiA9IHN0ci5sZW5ndGg7CiAgICAgICAgICAgICAgICBpID0gMDsKICAgICAgICAgICAgICAgIHdoaWxlKGkgPCBsZW4pIHsKICAgICAgICAgICAgICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSsrKTsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYyA+PiA0KQogICAgICAgICAgICAgICAgICAgIHsgCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiBjYXNlIDI6IGNhc2UgMzogY2FzZSA0OiBjYXNlIDU6IGNhc2UgNjogY2FzZSA3OgogICAgICAgICAgICAgICAgICAgICAgICAvLyAweHh4eHh4eAogICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gc3RyLmNoYXJBdChpLTEpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjogY2FzZSAxMzoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gMTEweCB4eHh4ICAgMTB4eCB4eHh4CiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXIyID0gc3RyLmNoYXJDb2RlQXQoaSsrKTsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgxRikgPDwgNikgfCAoY2hhcjIgJiAweDNGKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgICAgICAgICAvLyAxMTEwIHh4eHggIDEweHggeHh4eCAgMTB4eCB4eHh4CiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXIyID0gc3RyLmNoYXJDb2RlQXQoaSsrKTsKICAgICAgICAgICAgICAgICAgICAgICAgY2hhcjMgPSBzdHIuY2hhckNvZGVBdChpKyspOwogICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAweDBGKSA8PCAxMikgfAogICAgICAgICAgICAgICAgICAgICAgICAoKGNoYXIyICYgMHgzRikgPDwgNikgfAogICAgICAgICAgICAgICAgICAgICAgICAoKGNoYXIzICYgMHgzRikgPDwgMCkpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzdGFydF93YWl0KCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAnd2FpdCc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gb3Zlcl93YWl0KCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAnYXV0byc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gYmFzZTY0c3RyZGVjb2RlKHN0cikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuIHV0Zjh0bzE2KGJhc2U2NGRlY29kZShzdHIpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiB0cmltKHN0cikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXlxzK3xccyskKS8sICIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KF9lbGVtZW50KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgX3BhcmVudEVsZW1lbnQgPSBfZWxlbWVudC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgaWYoX3BhcmVudEVsZW1lbnQpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgX3BhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoX2VsZW1lbnQpOyAgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gaGlkZUJGcmFtZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIG9uRGl2KGRpdiwgY3NzTmFtZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGl2LmNsYXNzTmFtZSA9IGNzc05hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gb3V0RGl2KGRpdiwgY3NzTmFtZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGl2LmNsYXNzTmFtZSA9IGNzc05hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlWE1MSFRUUCgpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciB4bWxodHRwID0gbnVsbDsKICAgICAgICAgICAgICAgIHhtbGh0dHBPYmogPSBbIk1TWE1MMi5YbWxIdHRwLjUuMCIsIk1TWE1MMi5YbWxIdHRwLjQuMCIsCiAgICAgICAgICAgICAgICAiTVNYTUwyLlhtbEh0dHAuMy4wIiwiTVNYTUwyLlhtbEh0dHAiLCJNaWNyb3NvZnQuWG1sSHR0cCJdOwogICAgICAgICAgICAgICAgaWYod2luZG93LlhNTEh0dHBSZXF1ZXN0KQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYod2luZG93LkFjdGl2ZVhPYmplY3QpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZm9yKGk9MDtpPHhtbGh0dHBPYmoubGVuZ3RoO2krKykgICAgCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0cnl7eG1saHR0cCA9IG5ldyBBY3RpdmVYT2JqZWN0KHhtbGh0dHBPYmpbaV0pO2JyZWFrO30KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2goZSl7eG1saHR0cCA9IG51bGw7fQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0NhbiBub3QgY3JlYXRlIFhNTEhUVFAgT2JqZWN0Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4geG1saHR0cDsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL2Nsb3NlIGZvcm0KICAgICAgICAgICAgZnVuY3Rpb24gQ2xvc2VUaGlzKGVsZW1lbnQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gSGlkZVRhc2tmb3JtKCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrZm9ybScpOwogICAgICAgICAgICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL2hpZGRlbiBOb2RlRm9ybQogICAgICAgICAgICBmdW5jdGlvbiBIaWRlTm9kZWZvcm0oKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vZGVmb3JtJyk7CiAgICAgICAgICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgIEhpZGVUYXNrZm9ybSgpCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBOb2RlWEFkZChlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDsKICAgICAgICAgICAgICAgIHZhciB4ID0gZS5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0OwogICAgICAgICAgICAgICAgdmFyIHkgPSBlLmNsaWVudFkgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDsKICAgICAgICAgICAgICAgIHZhciBYZGl2ID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJub2RlZm9ybSIpOwogICAgICAgICAgICAgICAgWGRpdi5zdHlsZS5sZWZ0ID0geDsKICAgICAgICAgICAgICAgIFhkaXYuc3R5bGUudG9wID0geSArIDEwOwogICAgICAgICAgICAgICAgWGRpdi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7CiAgICAgICAgICAgICAgICAvL292ZXJCRnJhbWUoWGRpdik7CiAgICAgICAgICAgICAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmZvcm1zWyJub2RlZm9ybSJdOwogICAgICAgICAgICAgICAgZm9ybVsnb3AnXS52YWx1ZSA9IDE7CiAgICAgICAgICAgICAgICBmb3JtWydsaW1pdCddLnZhbHVlID0gMDsKICAgICAgICAgICAgICAgIGZvcm1bJ25hbWUnXS5mb2N1cygpOwogICAgICAgICAgICAgICAgZm9ybVsnbmFtZSddLnZhbHVlID0gJyc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gVGFza1hBZGQoZSwgbm9kZWlkLCBub2RldHlwZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHBvcnRsaXN0ID0gWyI0ODMyIiwgIjQ1MjAiLCAiNDcyOCJdOwogICAgICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50OwogICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7CiAgICAgICAgICAgICAgICB2YXIgWGRpdiA9ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGFza2Zvcm0iKTsKICAgICAgICAgICAgICAgIHZhciB4ID0gZS5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0OwogICAgICAgICAgICAgICAgdmFyIHkgPSBlLmNsaWVudFkgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDsKICAgICAgICAgICAgICAgIFhkaXYuc3R5bGUubGVmdCA9IHg7CiAgICAgICAgICAgICAgICBYZGl2LnN0eWxlLnRvcCA9IHkgKyAxMDsKICAgICAgICAgICAgICAgIFhkaXYuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUnOwogICAgICAgICAgICAgICAgdmFyIGZvcm0gPSBkb2N1bWVudC5mb3Jtc1sidGFza2Zvcm0iXTsKICAgICAgICAgICAgICAgIGZvcm1bJ29wJ10udmFsdWUgPSA1OwogICAgICAgICAgICAgICAgZm9ybVsnbm9kZWlkJ10udmFsdWUgPSBub2RlaWQ7CiAgICAgICAgICAgICAgICBpZihub2RldHlwZSA+PSAwKQogICAgICAgICAgICAgICAgICAgIGZvcm1bJ3BvcnQnXS52YWx1ZSA9IHBvcnRsaXN0W25vZGV0eXBlXTsKICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgICAgZm9ybVsncG9ydCddLnZhbHVlID0gJyc7CiAgICAgICAgICAgICAgICBmb3JtWydpcCddLmZvY3VzKCk7CiAgICAgICAgICAgICAgICBmb3JtWydpcCddLnZhbHVlID0gJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vbGlzdCBub2RlcyAKICAgICAgICAgICAgZnVuY3Rpb24gTGlzdE5vZGVzKHR4dCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIG5vZGVsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tzZWxlY3QnKTsKICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgcmVzID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBodG1sID0gIiIsIGNzcyA9ICIiOwogICAgICAgICAgICAgICAgaWYodHh0ICYmIChyZXMgPSBldmFsKHR4dCkpICYmIG5vZGVsaXN0KQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5vZGVsaXN0LmlubmVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgIGlmKChub2RlcyA9IHJlc1snbm9kZXMnXSkgJiYgcmVzWydjb3VudCddID4gMCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodG1sID0gIjx1bCBjbGFzcz0ndWx0YWInPiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih4IGluIG5vZGVzKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGltaXQgPSBub2Rlc1t4XVsnbGltaXQnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4bmFtZSA9IG5vZGVzW3hdWyduYW1lJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSBub2Rlc1t4XVsndG90YWwnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gIjxsaSBjbGFzcz0nbHRhYicgb25tb3VzZW1vdmU9XCJvbkRpdih0aGlzLCAnbHRhYi1zZWxlY3RlZCcpXCIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAiIG9ubW91c2VvdXQ9XCJvdXREaXYodGhpcywgJ2x0YWInKVwiID4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAiPGZvcm0gc3R5bGU9JycgYWN0aW9uPSdqYXZhc2NyaXB0OnZvaWQoMCknICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICIgb25zdWJtaXQ9J3JldHVybiBOb2RlRWRpdCh0aGlzKTsnPiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gIjxzcGFuIGNsYXNzPSdsdGFibmFtZScgb25jbGljaz0nVGFza0xpc3QoIit4KyIpJyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICIgdGl0bGU9J+eCueWHu+i/m+WFpeiKgueCueS7u+WKoeeuoeeQhicgPiIreG5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICJbPHNwYW4gY2xhc3M9J250YXNrJyA+Iit0b3RhbCsiPC9zcGFuPl08L3NwYW4+IjsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDvpmZDliLY6IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gIjxpbnB1dCB0eXBlPWhpZGRlbiBuYW1lPSdub2RlaWQnIHZhbHVlPSciK3grIic+IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gIjxpbnB1dCB0eXBlPWhpZGRlbiBuYW1lPSdvcCcgdmFsdWU9JzMnPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICI8aW5wdXQgdHlwZT10ZXh0IG5hbWU9J2xpbWl0JyBzaXplPTEyIHZhbHVlPSciK2xpbWl0KyInPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAiPHNwYW4gY2xhc3M9J2VkZWxldGUnIHRpdGxlPSdEZWxldGUnICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICIgb25jbGljaz1cIk5vZGVEZWwoIit4KyIpXCI+IitjaHJkZWwrIjwvc3Bhbj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAiPC9mb3JtPjwvbGk+IjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICI8L3VsPiI7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVsaXN0LmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vYWxlcnQodHh0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvL2xpc3QgdGFza3MKICAgICAgICAgICAgZnVuY3Rpb24gTGlzdFRhc2tzKHR4dCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHJlcyA9IG51bGw7CiAgICAgICAgICAgICAgICBpZih0eHQgJiYgKHJlcyA9IGV2YWwodHh0KSkpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGV0eXBlbGlzdCA9IFsi5pGY6KaB6IqC54K5IiwgIuWIhuivjeiKgueCuSIsICLntKLlvJXoioLngrkiXTsKICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSByZXNbJ2lkJ107CiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVuYW1lID0gcmVzWyduYW1lJ107CiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGV0eXBlID0gcmVzWyd0eXBlJ107CiAgICAgICAgICAgICAgICAgICAgdmFyIG50YXNrcyA9IHJlc1snY291bnQnXTsKICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSByZXNbJ3RvdGFsJ107CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gcmVzWydsaW1pdCddOwogICAgICAgICAgICAgICAgICAgIHZhciBob3N0ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5wYWNrZXRzID0gMDsKICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbHN0ciA9ICAiPHVsIGNsYXNzPSd1bHRhYicgPiI7CiAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiPGxpIGNsYXNzPSd0YXNrLXRpdGxlJz4iOwogICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyI7CiAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAi54K55Ye7PHNwYW4gY2xhc3M9J2VhZGQnIHRpdGxlPSdDbGljayBBZGQgTmV3IFRhc2snICI7CiAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiIG9uY2xpY2s9XCJUYXNrWEFkZChldmVudCwnIitpZCsiJywnIitub2RldHlwZSsiJylcIj4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArY2hyYWRkKyI8L3NwYW4+5re75Yqg5Lu75YqhIjsKICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIuiKgueCuTpbPHNwYW4gY2xhc3M9J250YXNrJz4iK25vZGVuYW1lKyI8L3NwYW4+XSI7CiAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IjsKICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICLnsbvlnos6WzxzcGFuIGNsYXNzPSdudGFzayc+Iitub2RldHlwZWxpc3Rbbm9kZXR5cGVdKyI8L3NwYW4+XSI7CiAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IjsKICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICLku7vliqE6WzxzcGFuIGNsYXNzPSdudGFzayc+IitudGFza3MrIjwvc3Bhbj5dIjsKICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIue0ouW8lTpbPHNwYW4gY2xhc3M9J250YXNrJz4iK3RvdGFsKyI8L3NwYW4+XSI7CiAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IjsKICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICLntKLlvJXpmZDliLY6WzxzcGFuIGNsYXNzPSdudGFzayc+IitsaW1pdCsiPC9zcGFuPl0iOwogICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIjwvbGk+IjsKICAgICAgICAgICAgICAgICAgICB2YXIgdGFza3MgPSByZXNbJ3Rhc2tzJ107CiAgICAgICAgICAgICAgICAgICAgaWYodGFza3MpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgZm9yKHggaW4gdGFza3MpCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3QgPSB0YXNrc1t4XVsnaG9zdCddOwogICAgICAgICAgICAgICAgICAgICAgICBucGFja2V0cyA9IHRhc2tzW3hdWyducGFja2V0cyddOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICI8bGkgY2xhc3M9J2x0YXNrJyAiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICIgb25tb3VzZW1vdmU9XCJvbkRpdih0aGlzLCAnbHRhc2stc2VsZWN0ZWQnKVwiICI7CiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIiBvbm1vdXNlb3V0PVwib3V0RGl2KHRoaXMsICdsdGFzaycpO1wiID4iOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICI8c3BhbiBjbGFzcz0nbGZuYW1lJyA+Iitob3N0OwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICJbPHNwYW4gY2xhc3M9J250YXNrJyA+IitucGFja2V0cysiPC9zcGFuPl08L3NwYW4+IjsKICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IjsKICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiPHNwYW4gY2xhc3M9J2VkZWxldGUnIHRpdGxlPSdEZWxldGUnICI7CiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIm9uY2xpY2s9XCJUYXNrRGVsKCIreCsiKVwiPiIrY2hyZGVsKyI8L3NwYW4+IjsKICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiPC9saT4iOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICI8L3VsPiI7CiAgICAgICAgICAgICAgICAgICAgdmFyIG90YXNrbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrbGlzdHMnKTsKICAgICAgICAgICAgICAgICAgICBvdGFza2xpc3QuaW5uZXJIVE1MID0gaHRtbHN0cjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvL2xpc3QgCiAgICAgICAgICAgIGZ1bmN0aW9uIGxpc3QoKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgeG1sSHR0cCA9IG51bGw7CiAgICAgICAgICAgICAgICBpZigoeG1sSHR0cCA9IENyZWF0ZVhNTEhUVFAoKSkgIT0gbnVsbCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYXJndiA9ICJvcD00IjsKICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KGFyZ3YpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub3BlbignUE9TVCcsICcvJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LUxlbmd0aCIsIGFyZ3YubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnJlYWR5U3RhdGU9PTQpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAuc3RhdHVzID09IDIwMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0Tm9kZXMoeG1sSHR0cC5yZXNwb25zZVRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQoYXJndik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9hZGQKICAgICAgICAgICAgZnVuY3Rpb24gTm9kZUVkaXQoZm9ybSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHhtbEh0dHAgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIG5vZGVuYW1lID0gIiI7CiAgICAgICAgICAgICAgICB2YXIgbm9kZXR5cGUgPSAtMTsKICAgICAgICAgICAgICAgIHZhciBub2RlaWQgPSAtMTsKICAgICAgICAgICAgICAgIHZhciBsaW1pdCA9IC0xOwogICAgICAgICAgICAgICAgdmFyIGFyZ3YgPSAiIjsKICAgICAgICAgICAgICAgIGlmKGZvcm0gJiYgKG9wID0gZm9ybVsnb3AnXS52YWx1ZSkgPiAwKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmKG9wID09IDEgJiYgKG5vZGV0eXBlID0gZm9ybVsndHlwZSddLnZhbHVlKSA+PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICYmIChsaW1pdCA9IGZvcm1bJ2xpbWl0J10udmFsdWUpID49IDAKICAgICAgICAgICAgICAgICAgICAgICAgJiYgKG5vZGVuYW1lID0gZm9ybVsnbmFtZSddLnZhbHVlKSAhPSAiIikKCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhcmd2ID0gIm9wPTEmbmFtZT0iK25vZGVuYW1lKyImdHlwZT0iK25vZGV0eXBlKyImbGltaXQ9IitsaW1pdDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihvcCA9PSAyICYmIChub2RlaWQgPSBmb3JtWydub2RlaWQnXS52YWx1ZSkgPj0gMCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3YgPSAib3A9MiZub2RlaWQ9Iitub2RlaWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYob3AgPT0gMyAmJiAobm9kZWlkID0gZm9ybVsnbm9kZWlkJ10udmFsdWUpID49IDAgCiAgICAgICAgICAgICAgICAgICAgICAgICYmIChsaW1pdCA9IGZvcm1bJ2xpbWl0J10udmFsdWUpID49IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhcmd2ID0gIm9wPTMmbm9kZWlkPSIrbm9kZWlkKyImbGltaXQ9IitsaW1pdDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ZWxzZSBhbGVydCgi6K+36L6T5YWl5q2j56Gu55qE5pWw5o2uIik7CiAgICAgICAgICAgICAgICBpZihhcmd2ICYmICh4bWxIdHRwID0gQ3JlYXRlWE1MSFRUUCgpKSAhPSBudWxsKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoYXJndik7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vcGVuKCdQT1NUJywgJy8nLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtTGVuZ3RoIiwgYXJndi5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAucmVhZHlTdGF0ZT09NCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5zdGF0dXMgPT0gMjAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpZGVOb2RlZm9ybSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3ROb2Rlcyh4bWxIdHRwLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZW5kKGFyZ3YpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vZGVsIG5vZGUKICAgICAgICAgICAgZnVuY3Rpb24gTm9kZURlbChub2RlaWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciB4bWxIdHRwID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBhcmd2ID0gIm9wPTImbm9kZWlkPSIrbm9kZWlkOwogICAgICAgICAgICAgICAgaWYoYXJndiAmJiBjb25maXJtKCLnoa7orqTliKDpmaTor6XoioLngrk/IikgJiYgKHhtbEh0dHAgPSBDcmVhdGVYTUxIVFRQKCkpICE9IG51bGwpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgLy9hbGVydChhcmd2KTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ1BPU1QnLCAnLycsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1MZW5ndGgiLCBhcmd2Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5yZWFkeVN0YXRlPT00KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PSAyMDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGlkZU5vZGVmb3JtKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdE5vZGVzKHhtbEh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQoYXJndik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gVGFza0xpc3Qobm9kZWlkKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgeG1sSHR0cCA9IG51bGw7CiAgICAgICAgICAgICAgICBpZigoeG1sSHR0cCA9IENyZWF0ZVhNTEhUVFAoKSkgIT0gbnVsbCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYXJndiA9ICJvcD03Jm5vZGVpZD0iK25vZGVpZDsKICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KGFyZ3YpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub3BlbignUE9TVCcsICcvJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LUxlbmd0aCIsIGFyZ3YubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnJlYWR5U3RhdGU9PTQpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAuc3RhdHVzID09IDIwMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KHhtbEh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0VGFza3MoeG1sSHR0cC5yZXNwb25zZVRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2VuZChhcmd2KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBUYXNrRWRpdChmb3JtKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgeG1sSHR0cCA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgbm9kZWlkID0gLTE7CiAgICAgICAgICAgICAgICB2YXIgaXAgPSAiIjsKICAgICAgICAgICAgICAgIHZhciBwb3J0ID0gLTEKICAgICAgICAgICAgICAgIGlmKChub2RlaWQgPSBmb3JtWydub2RlaWQnXS52YWx1ZSkgPj0gMCAmJiAoaXAgPSBmb3JtWydpcCddLnZhbHVlKSAKICAgICAgICAgICAgICAgICAgICAmJiAocG9ydCA9IGZvcm1bJ3BvcnQnXS52YWx1ZSkgPiAwICYmICh4bWxIdHRwID0gQ3JlYXRlWE1MSFRUUCgpKSAhPSBudWxsKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciBhcmd2ID0gIm9wPTUmaXA9IitpcCsiJnBvcnQ9Iitwb3J0KyImbm9kZWlkPSIrbm9kZWlkOwogICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoYXJndik7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vcGVuKCdQT1NUJywgJy8nLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtTGVuZ3RoIiwgYXJndi5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAucmVhZHlTdGF0ZT09NCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5zdGF0dXMgPT0gMjAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoeG1sSHR0cC5yZXNwb25zZVRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpZGVUYXNrZm9ybSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3RUYXNrcyh4bWxIdHRwLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZW5kKGFyZ3YpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBhbGVydCgi6K+36L6T5YWl5q2j56Gu55qE5Lu75Yqh5Y+C5pWwISIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vZGVsIG5vZGUKICAgICAgICAgICAgZnVuY3Rpb24gVGFza0RlbCh0YXNraWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciB4bWxIdHRwID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBhcmd2ID0gIm9wPTYmdGFza2lkPSIrdGFza2lkOwogICAgICAgICAgICAgICAgaWYoYXJndiAmJiBjb25maXJtKCLnoa7orqTliKDpmaTor6Xku7vliqE/IikgJiYgKHhtbEh0dHAgPSBDcmVhdGVYTUxIVFRQKCkpICE9IG51bGwpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgLy9hbGVydChhcmd2KTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ1BPU1QnLCAnLycsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1MZW5ndGgiLCBhcmd2Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5yZWFkeVN0YXRlPT00KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PSAyMDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGlkZVRhc2tmb3JtKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdFRhc2tzKHhtbEh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQoYXJndik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9kaXNwbGF5IHRlcm1zCiAgICAgICAgICAgIGZ1bmN0aW9uIERpc3BsYXlCVGVybXModHh0KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgb2JqID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0ZXJtbGlzdHMnKQogICAgICAgICAgICAgICAgdmFyIHJlcyA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgYXJyID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmKHR4dCAmJiBvYmogJiYgKHJlcyA9IGV2YWwodHh0KSkgJiYgKGFyciA9IHJlc1snYnRlcm1zJ10pKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG9iai5pbm5lckhUTUwgPSAiIjsKICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbHN0ciA9ICAiPEhSPjx1bCBjbGFzcz0ndWx0YWInID4iOwogICAgICAgICAgICAgICAgICAgIHZhciBzMSA9ICIiLCBzMiA9ICIiOwogICAgICAgICAgICAgICAgICAgIGZvciAoeCBpbiBhcnIpIAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgczEgPSAiIiwgczIgPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXJyW3hdLnN0YXR1cyA9PSAxKSBzMSA9ICJzZWxlY3RlZCI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFyclt4XS5zdGF0dXMgPT0gMikgczIgPSAic2VsZWN0ZWQiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICI8bGkgY2xhc3M9J2x0YXNrJyAiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICIgb25tb3VzZW1vdmU9XCJvbkRpdih0aGlzLCAnbHRhc2stc2VsZWN0ZWQnKVwiICI7CiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIiBvbm1vdXNlb3V0PVwib3V0RGl2KHRoaXMsICdsdGFzaycpO1wiID4iOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICImbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICLnirbmgIE6WzxzZWxlY3QgbmFtZT0nc3RhdHVzJyAiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICIgb25jaGFuZ2U9XCJVcGRhdGVCVGVybSh0aGlzLCciK3grIicpXCI+IjsKICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiPG9wdGlvbiB2YWx1ZT0nMScgIitzMSsiPuWxj+iUvTwvb3B0aW9uPiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gIjxvcHRpb24gdmFsdWU9JzInICIrczIrIj7pmY3mnYM8L29wdGlvbj4iOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICI8L3NlbGVjdD4iOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICImbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICJJRDpbPHNwYW4gY2xhc3M9J250YXNrJz4iK2Fyclt4XS5pZCsiPC9zcGFuPl0iOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICImbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICLor43mnaE6WzxzcGFuIGNsYXNzPSdudGFzayc+IithcnJbeF0udGV4dCsiPC9zcGFuPl0iOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICImbmJzcDsmbmJzcDsiOwogICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICI8c3BhbiBjbGFzcz0nbnRhc2snIG9uY2xpY2s9XCJEZWxldGVCVGVybSgiK3grIilcIj7liKDpmaQ8L3NwYW4+IjsKICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSAiPC9saT4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICI8L3VsPiI7CiAgICAgICAgICAgICAgICAgICAgb2JqLmlubmVySFRNTCA9IGh0bWxzdHI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gQlRlcm1zTGlzdChub2RlaWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciB4bWxIdHRwID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmKCh4bWxIdHRwID0gQ3JlYXRlWE1MSFRUUCgpKSAhPSBudWxsKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciBhcmd2ID0gIm9wPTE4IjsKICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KGFyZ3YpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub3BlbignUE9TVCcsICcvJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LUxlbmd0aCIsIGFyZ3YubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnJlYWR5U3RhdGU9PTQpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAuc3RhdHVzID09IDIwMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KHhtbEh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaXNwbGF5QlRlcm1zKHhtbEh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQoYXJndik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy91cGRhdGUgdGVybSBzdGF0dXMKICAgICAgICAgICAgZnVuY3Rpb24gVXBkYXRlQlRlcm0ob2JqLCB0ZXJtaWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSAwOwogICAgICAgICAgICAgICAgdmFyIHhtbEh0dHAgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIGFyZ3YgPSAiIjsKICAgICAgICAgICAgICAgIGlmKG9iaiAmJiB0ZXJtaWQgPiAwICYmIGNvbmZpcm0oIuehruiupOS/ruaUueeKtuaAgT8iKSA9PSB0cnVlKSAKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBvYmoub3B0aW9uc1tvYmouc2VsZWN0ZWRJbmRleF0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgYXJndiA9ICJvcD0xNiZ0ZXJtaWQ9Iit0ZXJtaWQrIiZzdGF0dXM9IitzdGF0dXM7CiAgICAgICAgICAgICAgICAgICAgaWYoYXJndiAmJiAoeG1sSHR0cCA9IENyZWF0ZVhNTEhUVFAoKSkgIT0gbnVsbCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub3BlbignUE9TVCcsICcvJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1MZW5ndGgiLCBhcmd2Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIiwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5yZWFkeVN0YXRlPT00KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAuc3RhdHVzID09IDIwMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpc3BsYXlCVGVybXMoeG1sSHR0cC5yZXNwb25zZVRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFsZXJ0KCLmk43kvZzlpLHotKXvvIEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQoYXJndik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIERlbGV0ZUJUZXJtKHRlcm1pZCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHhtbEh0dHAgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIGFyZ3YgPSAiIjsKICAgICAgICAgICAgICAgIGlmKHRlcm1pZCA+IDAgJiYgY29uZmlybSgi56Gu6K6k5Yig6ZmkPyIpID09IHRydWUpIAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGFyZ3YgPSAib3A9MTkmdGVybWlkPSIrdGVybWlkOwogICAgICAgICAgICAgICAgICAgIGlmKGFyZ3YgJiYgKHhtbEh0dHAgPSBDcmVhdGVYTUxIVFRQKCkpICE9IG51bGwpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ1BPU1QnLCAnLycsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtTGVuZ3RoIiwgYXJndi5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAucmVhZHlTdGF0ZT09NCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PSAyMDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaXNwbGF5QlRlcm1zKHhtbEh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbGVydCgi5pON5L2c5aSx6LSl77yBIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZW5kKGFyZ3YpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvL3NldCB0ZXJtIHN0YXR1cwogICAgICAgICAgICBmdW5jdGlvbiBBZGRCVGVybXMoZm9ybSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHRleHQgPSAiIjsKICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSAwOwogICAgICAgICAgICAgICAgdmFyIGFyciA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgeG1sSHR0cCA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgYXJndiA9ICIiOwogICAgICAgICAgICAgICAgdmFyIG9iaiA9IG51bGw7CiAgICAgICAgICAgICAgICBpZihmb3JtICYmICh0ZXh0ID0gZm9ybVsnYnRlcm1zbGlzdCddLnZhbHVlKSAmJiAob2JqID0gZm9ybVsnc3RhdHVzJ10pKSAKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBvYmoub3B0aW9uc1tvYmouc2VsZWN0ZWRJbmRleF0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgaWYoKGFyciA9IHRleHQuc3BsaXQoIlxuIikpICYmIGFyci5sZW5ndGggPiAwKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXJndiA9ICJvcD0xNSZzdGF0dXM9IitzdGF0dXMrIiZidGVybXM9IjsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd2ICs9IHRyaW0oYXJyW2ldKSsiOyI7IAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoYXJndik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKGFyZ3YgJiYgKHhtbEh0dHAgPSBDcmVhdGVYTUxIVFRQKCkpICE9IG51bGwpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ1BPU1QnLCAnLycsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtTGVuZ3RoIiwgYXJndi5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAucmVhZHlTdGF0ZT09NCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PSAyMDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtWydidGVybXNsaXN0J10udmFsdWUgPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlzcGxheUJUZXJtcyh4bWxIdHRwLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgYWxlcnQoIuaTjeS9nOWksei0pe+8gSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2VuZChhcmd2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9zZXQgaXRlbSBzdGF0dXMKICAgICAgICAgICAgZnVuY3Rpb24gU2V0SXRlbVN0YXR1cyhmb3JtKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgaWR0ZXh0ID0gIiI7CiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gMDsKICAgICAgICAgICAgICAgIHZhciBhcnIgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIHhtbEh0dHAgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIGFyZ3YgPSAiIjsKICAgICAgICAgICAgICAgIGlmKGZvcm0gJiYgKGlkdGV4dCA9IGZvcm1bJ2lkbGlzdCddLnZhbHVlKSkgCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gZm9ybVsnc3RhdHVzJ10udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgaWYoKGFyciA9IGlkdGV4dC5zcGxpdCgiXG4iKSkgJiYgYXJyLmxlbmd0aCA+IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhcmd2ID0gIm9wPTE0JmlkeF9zdGF0dXM9IjsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd2ICs9IHRyaW0oYXJyW2ldKSsiOiIrc3RhdHVzKyI7IjsgCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydChhcmd2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoYXJndiAmJiAoeG1sSHR0cCA9IENyZWF0ZVhNTEhUVFAoKSkgIT0gbnVsbCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub3BlbignUE9TVCcsICcvJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1MZW5ndGgiLCBhcmd2Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIiwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5yZWFkeVN0YXRlPT00KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbEh0dHAuc3RhdHVzID09IDIwMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCLmk43kvZzmiJDlip/vvIEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybVsnaWRsaXN0J10udmFsdWUgPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZW5kKGFyZ3YpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvL3NldCBzeW50ZXJtcwogICAgICAgICAgICBmdW5jdGlvbiBTZXRTeW5UZXJtcyhmb3JtKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9ICIiOwogICAgICAgICAgICAgICAgdmFyIGFyciA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgeG1sSHR0cCA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgYXJndiA9ICIiOwogICAgICAgICAgICAgICAgdmFyIG9iaiA9IG51bGw7CiAgICAgICAgICAgICAgICBpZihmb3JtICYmICh0ZXh0ID0gZm9ybVsnc3ludGVybXNsaXN0J10udmFsdWUpKSAKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZigoYXJyID0gdGV4dC5zcGxpdCgiXG4iKSkgJiYgYXJyLmxlbmd0aCA+IDApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhcmd2ID0gIm9wPTIxJnN5bnRlcm1zPSI7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndiArPSB0cmltKGFycltpXSkrIjsiOyAKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihhcmd2ICYmICh4bWxIdHRwID0gQ3JlYXRlWE1MSFRUUCgpKSAhPSBudWxsKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vcGVuKCdQT1NUJywgJy8nLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LUxlbmd0aCIsIGFyZ3YubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnJlYWR5U3RhdGU9PTQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5zdGF0dXMgPT0gMjAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybVsnc3ludGVybXNsaXN0J10udmFsdWUgPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoIuabtOaWsOaIkOWKnyEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbGVydCgi5pON5L2c5aSx6LSlISIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2VuZChhcmd2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vcmVzZXQgZHVtcAogICAgICAgICAgICBmdW5jdGlvbiBEdW1wUmVzZXQoZm9ybSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHhtbEh0dHAgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIGR1bXBmaWxlID0gIiI7CiAgICAgICAgICAgICAgICB2YXIgYXJndiA9ICIiOwogICAgICAgICAgICAgICAgdmFyIG5vID0gMDsKICAgICAgICAgICAgICAgIHZhciBvbm8gPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIG8gPSBudWxsOwogICAgICAgICAgICAgICAgaWYoZm9ybSAmJiAob25vID0gZm9ybVsnbm8nXSkKICAgICAgICAgICAgICAgICAgICAmJiAobm8gPSBvbm8ub3B0aW9uc1tvbm8ub3B0aW9ucy5zZWxlY3RlZEluZGV4XS52YWx1ZSkgPj0gMAogICAgICAgICAgICAgICAgICAgICYmIChkdW1wZmlsZSA9IGZvcm1bJ2R1bXBmaWxlJ10udmFsdWUpICE9ICIiIAogICAgICAgICAgICAgICAgICAgICYmIChvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R1bXBmaWxlJykpCiAgICAgICAgICAgICAgICAgICAgJiYgKHhtbEh0dHAgPSBDcmVhdGVYTUxIVFRQKCkpICE9IG51bGwpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgby5pbm5lckhUTUwgPSAiIjsKICAgICAgICAgICAgICAgICAgICBmb3JtWydkdW1wZmlsZSddLnZhbHVlID0gIiI7CiAgICAgICAgICAgICAgICAgICAgYXJndiA9ICJvcD0xNyZubz0iK25vKyImZHVtcGZpbGU9IitkdW1wZmlsZTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ1BPU1QnLCAnLycsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1MZW5ndGgiLCBhcmd2Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5yZWFkeVN0YXRlPT00KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PSAyMDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRHVtcExpc3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQoYXJndik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gRHVtcExpc3QoKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgeG1sSHR0cCA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgb2JqID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmKCh4bWxIdHRwID0gQ3JlYXRlWE1MSFRUUCgpKSAhPSBudWxsKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciBhcmd2ID0gIm9wPTIwIjsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ1BPU1QnLCAnLycsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1MZW5ndGgiLCBhcmd2Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5yZWFkeVN0YXRlPT00KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PSAyMDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoKG9iaiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdW1wZmlsZScpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1wbm8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHVtcG5vJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBldmFsKHhtbEh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG50YXNrcyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXNrcyA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlcyAmJiAobnRhc2tzID0gcmVzLm50YXNrcykgPjAgJiYgKHRhc2tzID0gcmVzLnRhc2tzKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVtcG5vLmxlbmd0aCA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IG50YXNrczsgaSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1bXBuby5vcHRpb25zWysra10gPSBuZXcgT3B0aW9uKCLpgJrpgZMiK2ksIGksIGZhbHNlKTs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHggaW4gdGFza3MpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAi6YCa6YGTIit4KyI6Jm5ic3A7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIjxzcGFuIHN0eWxlPSd0ZXh0LW92ZXJmbG93OmNsaXA7Jz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICt0YXNrc1t4XS5zb3VyY2UrIjwvc3Bhbj4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsiJm5ic3A7Jm5ic3A7Wzxmb250IGNvbG9yPScjNUZCNDA0Jz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICt0YXNrc1t4XS5vZmZzZXQrIjwvZm9udD4vPGZvbnQgY29sb3I9cmVkPiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK3Rhc2tzW3hdLnNpemUrIjwvZm9udD5dPGJyPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouaW5uZXJIVE1MID0gaHRtbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQoYXJndik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gcmVzeW5jKG9iaikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHhtbGh0dHAgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIHVyaSA9ICJvcD0wIjsKICAgICAgICAgICAgICAgIGlmKCh4bWxIdHRwID0gQ3JlYXRlWE1MSFRUUCgpKSAhPSBudWxsKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG9iai5kaXNhYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vcGVuKCdQT1NUJywgIi8iLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtTGVuZ3RoIiwgdXJpLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgeG1sSHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoeG1sSHR0cC5yZWFkeVN0YXRlPT00KQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PSAyMDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoIuaTjeS9nOaIkOWKnyEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNlbmQodXJpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgYWxlcnQoIuivt+axguWksei0pSEiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBsaXN0KCk7CiAgICAgICAgICAgIER1bXBMaXN0KCk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICA8L2hlYWQ+CiAgICA8IS0tIDxib2R5IG9ubG9hZD0namF2YXNjcmlwdDpsb2FkSW5pdCgpOyc+IC0tPgogICAgPGJvZHkgYWxpZ249Y2VudGVyID4KICAgIDxkaXYgaWQ9J21haW5mcmFtZSc+CiAgICA8ZGl2IGlkPSd0YXNrJz4KICAgICAgICA8ZGl2IGlkPXRhc2staGVhZGVyID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8dGFibGUgd2lkdGg9MTAwJSBoZWlnaHQ9MTAwJSBjZWxsc3BhY2luZz0wIGJvcmRlcj0wIHZhbGlnbj10b3AgYWxpZ249bGVmdCA+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSd0YXNrbGlzdCcgdmFsaWduPXRvcCB3aWR0aD00MDAgaGVpZ2h0PTEwMCUgPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2VsbHNwYWNpbmc9MCBib3JkZXI9MCB2YWxpZ249dG9wIGFsaWduPWxlZnQgd2lkdGg9MTAwJSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPXRvcCBjbGFzcz0ndGFza3RpdGxlJyB3aWR0aD0xMDAlID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDngrnlh7s8c3BhbiBjbGFzcz0nZWFkZCcgdGl0bGU9J0FkZCcgb25jbGljaz0nTm9kZVhBZGQoZXZlbnQpJz4g4pyaIDwvc3Bhbj7mt7vliqDntKLlvJXoioLngrkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9YnV0dG9uIG5hbWU9J3Jlc3luYycgdmFsdWU9J+mHjeaWsOWQjOatpee0ouW8lScgb25jbGljaz0ncmVzeW5jKHRoaXMpJyA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPXRvcCB3aWR0aD0xMDAlID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSd0YXNrc2VsZWN0Jz48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj10b3AgY2xhc3M9J3Rhc2t0aXRsZScgd2lkdGg9MTAwJSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDmlbDmja7mupDnrqHnkIYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG5hbWU9J3Jlc2V0ZHVtcCcgYWN0aW9uPSdqYXZhc2NyaXB0OnZvaWQoMCk7JyBvbnN1Ym1pdD0ncmV0dXJuIER1bXBSZXNldCh0aGlzKTsnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj10b3Agd2lkdGg9MTAwJSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9bm8gaWQ9J2R1bXBubyc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0tMT7pgInmi6npgJrpgZM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAg5pWw5o2u5rqQOjxpbnB1dCB0eXBlPXRleHQgbmFtZT0nZHVtcGZpbGUnIHNpemU9MzYgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9c3VibWl0IHZhbHVlPSfkv67mlLknPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nZHVtcGZpbGUnPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2YWxpZ249dG9wIGNsYXNzPSd0YXNrdGl0bGUnIHdpZHRoPTEwMCUgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0ZW1JROeuoeeQhijmr4/ooYzovpPlhaXkuIDkuKpJRCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG5hbWU9J2lkeGxpc3QnIGFjdGlvbj0namF2YXNjcmlwdDp2b2lkKDApOycgb25zdWJtaXQ9J3JldHVybiBTZXRJdGVtU3RhdHVzKHRoaXMpOyc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPXRvcCB3aWR0aD0xMDAlID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIElE5YiX6KGoOjx0ZXh0YXJlYSBuYW1lPWlkbGlzdCByb3dzPTQgY29scz0yMD48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg54q25oCBOjxzZWxlY3QgbmFtZT1zdGF0dXMgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9MCA+55Sf5pWIPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0tMSBzZWxlY3RlZD7lpLHmlYg8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1zdWJtaXQgdmFsdWU9J09LJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPXRvcCBjbGFzcz0ndGFza3RpdGxlJyB3aWR0aD0xMDAlID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDmlY/mhJ/or43nrqHnkIYo5q+P6KGM6L6T5YWl5LiA5LiqKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPWVhZGQgIGhyZWY9ImphdmFzY3JpcHQ6QlRlcm1zTGlzdCgpOyI+5pi+56S65YWo6YOoPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbmFtZT0nYnRlcm1zJyBhY3Rpb249J2phdmFzY3JpcHQ6dm9pZCgwKTsnIG9uc3VibWl0PSdyZXR1cm4gQWRkQlRlcm1zKHRoaXMpOyc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgdmFsaWduPXRvcCB3aWR0aD0xMDAlID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIOWxj+iUveivjTo8dGV4dGFyZWEgbmFtZT1idGVybXNsaXN0IHJvd3M9OCBjb2xzPTIwPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDnirbmgIE6PHNlbGVjdCBuYW1lPXN0YXR1cyA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0xID7lsY/olL08L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPTIgc2VsZWN0ZWQ+6ZmN5p2DPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPXN1Ym1pdCB2YWx1ZT0nT0snPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj10b3AgY2xhc3M9J3Rhc2t0aXRsZScgd2lkdGg9MTAwJSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg5ZCM5LmJ6K+N6KGoKOavj+ihjOS4gOe7hCzkvovlrZDvvJrogq/lvrfln7p8S0ZDKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbmFtZT0nc3ludGVybXMnIGFjdGlvbj0namF2YXNjcmlwdDp2b2lkKDApOycgb25zdWJtaXQ9J3JldHVybiBTZXRTeW5UZXJtcyh0aGlzKTsnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHZhbGlnbj10b3Agd2lkdGg9MTAwJSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDlkIzkuYnor406PHRleHRhcmVhIG5hbWU9c3ludGVybXNsaXN0IHJvd3M9OCBjb2xzPTIwPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1zdWJtaXQgdmFsdWU9J09LJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2YWxpZ249dG9wIHdpZHRoPTEwMCUgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPHRkIHZhbGlnbj10b3AgYWxpZ249bGVmdCBjbGFzcz0ndGFza2xpc3RzJyBjZWxsc3BhY2luZz0wIGJvcmRlcj0wID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSd0YXNrbGlzdHMnPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2J0ZXJtbGlzdHMnPjwvZGl2PgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICA8L3RhYmxlPgogICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgaWQ9J25vZGVmb3JtJz4KICAgICAgICA8Zm9ybSBuYW1lPSdub2RlZm9ybScgYWN0aW9uPSdqYXZhc2NyaXB0OnZvaWQoMCk7JyBvbnN1Ym1pdD0ncmV0dXJuIE5vZGVFZGl0KHRoaXMpOyc+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdjbG9zZXR4dCcgb25jbGljaz0iQ2xvc2VUaGlzKHRoaXMpIiA+5YWz6ZetPC9zcGFuPgogICAgICAgICAgICA8aW5wdXQgdHlwZT1oaWRkZW4gbmFtZT0nb3AnIHZhbHVlPTEgPgogICAgICAgICAgICA8aW5wdXQgdHlwZT1oaWRkZW4gbmFtZT0nbm9kZWlkJyB2YWx1ZT0tMSA+CiAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ndHlwZScgPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nLTEnIHNlbGVjdGVkPumAieaLqeexu+WIqzwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nMCcgPuaRmOimgeiKgueCuTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nMScgPuino+aekOiKgueCuTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nMicgPue0ouW8leiKgueCuTwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4gCiAgICAgICAgICAgICZuYnNwOyZuYnNwOwogICAgICAgICAgICDlkI3np7A6PGlucHV0IHR5cGU9dGV4dCBzaXplPTMyIG5hbWU9J25hbWUnID4KICAgICAgICAgICAgJm5ic3A7Jm5ic3A7CiAgICAgICAgICAgIOaVsOaNrumZkOWItjo8aW5wdXQgdHlwZT10ZXh0IHNpemU9MTIgbmFtZT0nbGltaXQnPgogICAgICAgICAgICAmbmJzcDsmbmJzcDsKICAgICAgICAgICAgPGlucHV0IHR5cGU9c3VibWl0IHZhbHVlPSdBZGQnPgogICAgPC9mb3JtPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSd0YXNrZm9ybSc+CiAgICAgICAgPGZvcm0gbmFtZT0ndGFza2Zvcm0nIGFjdGlvbj0namF2YXNjcmlwdDp2b2lkKDApOycgb25zdWJtaXQ9J3JldHVybiBUYXNrRWRpdCh0aGlzKTsnPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0nY2xvc2V0eHQnIG9uY2xpY2s9IkNsb3NlVGhpcyh0aGlzKSIgPuWFs+mXrTwvc3Bhbj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9aGlkZGVuIG5hbWU9J29wJyB2YWx1ZT01ID4KICAgICAgICAgICAgPGlucHV0IHR5cGU9aGlkZGVuIG5hbWU9J25vZGVpZCcgdmFsdWU9LTEgPgogICAgICAgICAgICA8aW5wdXQgdHlwZT1oaWRkZW4gbmFtZT0ndHlwZScgdmFsdWU9LTEgPgogICAgICAgICAgICAmbmJzcDsmbmJzcDsKICAgICAgICAgICAgSVA6PGlucHV0IHR5cGU9dGV4dCBzaXplPTIwIG5hbWU9J2lwJyA+OjxpbnB1dCB0eXBlPXRleHQgc2l6ZT04IG5hbWU9J3BvcnQnPgogICAgICAgICAgICAmbmJzcDsmbmJzcDsKICAgICAgICAgICAgPGlucHV0IHR5cGU9c3VibWl0IHZhbHVlPSdBZGQnPgogICAgPC9mb3JtPgogICAgPC9kaXY+CjwvYm9keT4KPC9odG1sPgo=";
#endif
